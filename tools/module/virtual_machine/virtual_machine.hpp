#pragma once
#include "../../base.hpp"

#include <string>
#include <vector>
namespace tools {
	class virtual_machine {
		enum class data_type : u16 {
			i8,     // 8bit 有符号整数
			u8,     // 8bit 无符号整数
			i16,    // 16bit 有符号整数
			u16,    // 16bit 无符号整数
			i32,    // 32bit 有符号整数
			u32,    // 32bit 无符号整数
			i64,    // 64bit 有符号整数
			u64,    // 64bit 无符号整数

			f32,    // 32bit 浮点数
			f64,    // 64bit 浮点数
		};

		enum class ASM : u16 {
			// 算术运算
			加,			// 指令 类型 输出 输入 输入
			减,			// 指令 类型 输出 输入 输入
			乘,			// 指令 类型 输出 输入 输入
			除,			// 指令 类型 输出 输入 输入
			取余,		// 指令 类型 输出 输入 输入
			取反,		// 指令 类型 输出 输入 ____
			自增,		// 指令 类型 输出 输入 ____
			自减,		// 指令 类型 输出 输入 ____

			// 逻辑运算
			与,			// 指令 类型 输出 输入 输入
			或,			// 指令 类型 输出 输入 输入
			异或,		// 指令 类型 输出 输入 输入
			非,			// 指令 类型 输出 输入 ____

			// 比较运算
			等于,		// 指令 类型 输出 输入 输入
			不等于,		// 指令 类型 输出 输入 输入
			大于,		// 指令 类型 输出 输入 输入
			大于等于,	// 指令 类型 输出 输入 输入
			小于,		// 指令 类型 输出 输入 输入
			小于等于,	// 指令 类型 输出 输入 输入

			// 跳转
			跳转,		// 指令 ____ 地址 ____ ____
			跳转非零,	// 指令 类型 地址 输入 ____
			跳转零,		// 指令 类型 地址 输入 ____

			// 赋值
			拷贝,		// 指令 类型 输出 输入 ____

			// 栈操作
			弹出,		// 指令 类型 输出 ____ ____
			入栈,		// 指令 类型 ____ 输入 ____

			// 函数调用
			调用,		// 指令 ____ 地址 ____ ____
			返回,		// 指令 ____ ____ 输入 ____ 

			// 内存操作
			分配,		// 指令 ____ 地址 输入 ____
			释放,		// 指令 ____ 地址 ____ ____

			// 其他
			空闲,		// 指令 ____ ____ ____ ____
			结束程序,	// 指令 ____ ____ ____ ____
			让出时间,	// 指令 ____ ____ ____ ____

			// io交互
			打印字符,	// 指令 ____ ____ 输入 输入
			读取字符,	// 指令 ____ 输出 ____ 输入
			读取值,		// 指令 类型 输出 ____ ____
		};

		struct commands {
			ASM asm_ = ASM::空闲;
			data_type type_;
			u32 out_ptr_;
			u32 in1_ptr_;
			u32 in2_ptr_;
		};

		// 内存
		struct info {
			u32 memory_size;		// 内存总大小
			u32 program_entry;		// 程序入口地址

			u32 text_down;			// 代码区起始地址
			u32 text_now_up;		// 代码区当前地址 程序指针
			u32 text_up;			// 代码区结束地址

			u32 stack_down;			// 栈区起始地址
			u32 stack_now_up;		// 栈区当前地址
			u32 stack_up;			// 栈区结束地址

			u32 heap_down;			// 堆区起始地址
			u32 heap_up;			// 堆区结束地址

			// 寄存器组
			u64 registers[32];		// 寄存器
		};

	public:
		// 编译器
		i64 compile(std::u32string& source_code);




		// 重置程序
		i64 reset();

		// 解释器
		// INT64_MIN 代表执行时间不足，遇到最大运行次数限制暂停运行。
		i64 execute(u64 run_command_size = tools::size::max<u64>());
	private:
		// 内存分区(0->∞) [信息区|代码区|数据区|栈区|堆区>>>>>>]
		// 原始程序数据，不可修改，不存储栈和堆。
		std::vector<byte> memory_static;
		// 运行时内存，可修改，存储栈和堆。
		std::vector<byte> memory_;
	};
}